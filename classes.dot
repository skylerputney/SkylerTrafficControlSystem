digraph "classes" {
rankdir=BT
charset="utf-8"
"TrafficControl.TLController.AITLController" [color="black", fontcolor="black", label=<{AITLController|model : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"TrafficControl.TLController.CongestionTLController" [color="black", fontcolor="black", label=<{CongestionTLController|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"TrafficControl.DataLogger.DataLogger" [color="black", fontcolor="black", label=<{DataLogger|data : DataFrame, NoneType<br ALIGN="LEFT"/>log_dir : str<br ALIGN="LEFT"/>plot_dir : str<br ALIGN="LEFT"/>|compute_average(xml_file: str, element: str, attribute: str)<br ALIGN="LEFT"/>compute_average_trip_time()<br ALIGN="LEFT"/>compute_average_wait_time()<br ALIGN="LEFT"/>end_collection(file_name: str)<br ALIGN="LEFT"/>get_dataframe()<br ALIGN="LEFT"/>log_data()<br ALIGN="LEFT"/>save_log(file_name: str, file_format: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"TrafficControl.Detector.Detector" [color="black", fontcolor="black", label=<{Detector|id : int<br ALIGN="LEFT"/>|get_id(): int<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"TrafficControl.DetectorManager.DetectorManager" [color="black", fontcolor="black", label=<{DetectorManager|detectors : list[Detector]<br ALIGN="LEFT"/>|get_highest_vehicle_number()<br ALIGN="LEFT"/>get_highest_wait_time()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"TrafficControl.Intersection.Intersection" [color="black", fontcolor="black", label=<{Intersection|detector_manager<br ALIGN="LEFT"/>id : int<br ALIGN="LEFT"/>phase_time : float<br ALIGN="LEFT"/>state<br ALIGN="LEFT"/>|get_phase_time(): float<br ALIGN="LEFT"/>get_state(): TLState<br ALIGN="LEFT"/>set_phase_time(phase_time: float)<br ALIGN="LEFT"/>set_state(state: TLState)<br ALIGN="LEFT"/><I>update</I>(state: TLState, phase_time: float)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"TrafficControl.Intersection.ModelIntersection" [color="black", fontcolor="black", label=<{ModelIntersection|<br ALIGN="LEFT"/>|<I>update</I>(state: TLState, phase_time: float)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"TrafficControl.Detector.SUMODetector" [color="black", fontcolor="black", label=<{SUMODetector|<br ALIGN="LEFT"/>|get_avg_vehicle_length()<br ALIGN="LEFT"/>get_avg_vehicle_speed()<br ALIGN="LEFT"/>get_avg_wait_time()<br ALIGN="LEFT"/>get_detector_length()<br ALIGN="LEFT"/>get_max_wait_time()<br ALIGN="LEFT"/>get_number_vehicles()<br ALIGN="LEFT"/>get_sumo_id()<br ALIGN="LEFT"/>get_vehicles_on_detector()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"TrafficControl.Intersection.SUMOIntersection" [color="black", fontcolor="black", label=<{SUMOIntersection|phase_time : float<br ALIGN="LEFT"/>state<br ALIGN="LEFT"/>|update(state: TLState, phase_time: float)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"TrafficControl.Simulation.Simulation" [color="black", fontcolor="black", label=<{Simulation|sumo_config_path : str<br ALIGN="LEFT"/>|end()<br ALIGN="LEFT"/>get_vehicle_number()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>step()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"TrafficControl.SimulationManager.SimulationManager" [color="black", fontcolor="black", label=<{SimulationManager|current_iteration : int<br ALIGN="LEFT"/>data_logger<br ALIGN="LEFT"/>iterations : int<br ALIGN="LEFT"/>simulation<br ALIGN="LEFT"/>time_step : int<br ALIGN="LEFT"/>traffic_controller<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"TrafficControl.TLController.StaticTLController" [color="black", fontcolor="black", label=<{StaticTLController|all_red_time : int<br ALIGN="LEFT"/>current_phase<br ALIGN="LEFT"/>current_phase_index<br ALIGN="LEFT"/>green_time : int<br ALIGN="LEFT"/>last_update_time<br ALIGN="LEFT"/>phase_state_machine : list<br ALIGN="LEFT"/>phase_time : int<br ALIGN="LEFT"/>yellow_time : int<br ALIGN="LEFT"/>|get_state_duration(): int<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"TrafficControl.TLController.TLController" [color="black", fontcolor="black", label=<{TLController|intersection<br ALIGN="LEFT"/>phase_time : int<br ALIGN="LEFT"/>simulation_mode : bool<br ALIGN="LEFT"/>tl_mode<br ALIGN="LEFT"/>|get_intersection(): Intersection<br ALIGN="LEFT"/>get_phase_time(): float<br ALIGN="LEFT"/>get_simulation_mode(): bool<br ALIGN="LEFT"/>get_tl_mode(): TrafficLightMode<br ALIGN="LEFT"/>set_tl_mode(tl_mode: TrafficLightMode)<br ALIGN="LEFT"/><I>update</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"TrafficControl.TLState.TLState" [color="black", fontcolor="black", label=<{TLState|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"TrafficControl.TrafficController.TrafficController" [color="black", fontcolor="black", label=<{TrafficController|tl_controllers : list[TLController]<br ALIGN="LEFT"/>|count_tl_controllers(): int<br ALIGN="LEFT"/>get_data()<br ALIGN="LEFT"/>get_tl_controllers(): list[TLController]<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"TrafficControl.TrafficLightMode.TrafficLightMode" [color="black", fontcolor="black", label=<{TrafficLightMode|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"TrafficControl.Detector.SUMODetector" -> "TrafficControl.Detector.Detector" [arrowhead="empty", arrowtail="none"];
"TrafficControl.Intersection.ModelIntersection" -> "TrafficControl.Intersection.Intersection" [arrowhead="empty", arrowtail="none"];
"TrafficControl.Intersection.SUMOIntersection" -> "TrafficControl.Intersection.Intersection" [arrowhead="empty", arrowtail="none"];
"TrafficControl.TLController.AITLController" -> "TrafficControl.TLController.TLController" [arrowhead="empty", arrowtail="none"];
"TrafficControl.TLController.CongestionTLController" -> "TrafficControl.TLController.TLController" [arrowhead="empty", arrowtail="none"];
"TrafficControl.TLController.StaticTLController" -> "TrafficControl.TLController.TLController" [arrowhead="empty", arrowtail="none"];
}
